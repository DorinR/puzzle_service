{"version":3,"sources":["containers/Pages/Home/static_files/solving_demo.gif","fonts/Rubik-Regular.ttf","store/actions/notistack.js","store/actions/actionTypes.js","firebase/firestore.js","store/utility.js","firebase/tdg.js","store/actions/auth.js","utils/iteration/python.js","store/actions/puzzle.js","components/Authentication/Login/Login.js","components/Authentication/Register/Register.js","components/Authentication/Logout/Logout.js","components/Authentication/ForgotPassword/ForgotPassword.js","containers/Pages/Puzzle/Components/SizeSelector.js","containers/Pages/Leaderboards/LeaderboardsTable.js","components/UI/Loading/CircularProgress.js","containers/Pages/Leaderboards/Leaderboards.js","containers/Pages/Home/Home.js","containers/Pages/Puzzle/Components/Piece.js","containers/Pages/Puzzle/Container/Board.js","components/Notifications/SolveStatusModal.js","components/Notifications/SolveSuccessModal.js","components/Notifications/ConfirmationPrompt.js","utils/state/stateConversion.js","containers/Pages/Puzzle/Container/Puzzle.js","components/Navigation/AccountNavigation/AccountNavigation.js","components/Navigation/Layout/Layout.js","components/Notifications/Notifier.js","components/Styled Components/Button.js","components/Styled Components/Container.js","containers/Pages/TestingStyledComponents/Test.js","containers/App.js","serviceWorker.js","store/reducers/counter.js","store/reducers/results.js","store/reducers/auth.js","store/reducers/notistack.js","store/reducers/puzzle.js","index.js"],"names":["module","exports","enqueueSnackbar","notification","key","options","type","Date","getTime","Math","random","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","db","firestore","PUZZLE_CONFIGS","updateObject","oldObject","updatedValues","flipPiece","state","action","newPuzzleState","puzzleState","index","wasTouched","setCompleted","oldScorecard","scorecard","size","difficulty","getNextPuzzleInLine","i","j","length","getNextDifficulty","zeroBasedSize","firestoreUpdateCompletedPuzzle","email","a","userRef","collection","where","get","forEach","doc","targetDocId","id","data","update","console","error","getUserData","usersRef","showOnboarding","username","updateUserShowOnboarding","onboarding","addNewScore","movesToSolve","add","setUserScore","collectionRef","userSnapshot","empty","previousBest","getLeaderboard","orderBy","limit","leaderboardSnapshot","leaderboard","push","isUsernameTaken","err","doesEmailExist","updateUsername","authSuccess","idToken","userId","token","logout","dispatch","logoutHelper","initializeScorecard","setPuzzleSize","setPuzzleDifficulty","localStorage","removeItem","checkAuthTimeout","expiresIn","setTimeout","auth","password","isLogin","userData","returnSecureToken","url","axios","post","then","response","expirationDate","setItem","localId","handleLogin","handleRegistration","catch","errorMessage","getErrorMessage","message","notistack","variant","autoHideDuration","updateScorecard","updateLocalShowOnboarding","newScorecard","3","easy","med","hard","4","5","vhard","6","7","8","9","xhard","10","addNewUser","resetPasswordConfirmation","range","end","Array","from","start","flipIndex","setPuzzleState","newState","updateCompletedPuzzleLocal","getNeighbours","target","correct_neighbours","el","initialValues","validationSchema","yup","shape","required","min","max","connect","loading","onAuth","actions","theme","useContext","ThemeContext","className","onSubmit","event","values","errors","touched","handleChange","handleBlur","handleSubmit","isSubmitting","Form","noValidate","Group","Label","Control","name","placeholder","value","onChange","onBlur","isValid","isInvalid","Feedback","Button","to","confirmPassword","test","when","is","val","oneOf","styled","button","onLogout","useEffect","ownProps","resetEmail","onResetPassword","requestPayload","requestType","userEmailConfirmation","setResetPasswordConfirmation","history","SizeSelector","props","isLevelComplete","level","Object","includes","ButtonGroup","active","selectedSize","onClick","handleClick","LeaderboardsTable","tableRows","records","map","reduce","accumulator","concat","colspan","Table","striped","bordered","hover","CircularProgress","style","position","left","top","transform","frontColor","backColor","puzzle","isAuthenticated","useState","setLevel","setDifficulty","isLoading","setIsLoading","setRecords","blankScorecard","generateEasyPuzzleButton","generateMediumPuzzleButton","generateHardPuzzleButton","generateVeryHardPuzzleButton","generateImpossiblePuzzleButton","result","Fragment","Row","Col","sm","marginBottom","as","column","wasRedirected","updateWasRedirected","useHistory","setShowOnboarding","customSpacing","customSpacingLarge","Alert","show","onClose","dismissible","Heading","Image","fluid","src","solving_demo","float","puzzleSize","neighbours","Number","idx","handleFlip","incrementMovesMade","isFlipped","flipDirection","resetPuzzle","pow","nextDifficulty","handleGeneratePuzzle","tdStyle","width","height","paddingTop","tableRow","tableColumns","tableData","boarder","SolveStatusModal","solvingStatuses","keys","solveStatus","title","text","get_strat_status","Modal","aria-labelledby","centered","Header","closeButton","Title","Body","Footer","onHide","floor","getClover","proceedButton","puzzleDifficulty","setWasTouched","setCompletedPuzzle","solveStatusShow","setSolveStatusShow","solveSuccessShow","setSolveSuccessShow","confirmationPrompShow","setConfirmationPromptShow","showLoginEncouragement","setShowLoginEncouragement","showConfetti","setShowConfetti","movesMade","setMovesMade","useWindowSize","desiredDifficulty","desiredSize","getNextPuzzle","nextSize","isGameOver","movesToCompleteMessage","successMessage","successMessageHeader","getSuccessMessage","swal","generateNextPuzzle","customSpacingSmall","handleConfirmResetPuzzle","setProceedButton","proceedGeneratePuzzle","handlePuzzleReset","handleConfirmGeneratePuzzle","puzzle_size","booleanState","binaryState","boolState","charAt","convertToBoolean","getInitialPuzzleState","p","currentSize","currentDifficulty","indexOf","setPuzzleSizeWrapper","proceedChangePuzzleSize","solveButton","Spinner","newSize","InputGroup","FormControl","readOnly","disabled","Append","tweenDuration","useStyles","makeStyles","navigationLinks","color","warningLink","AccountNavigation","isLoggedIn","Nav","classname","Link","href","Layout","ThemeToggleContext","Navbar","expand","collapseOnSelect","Brand","Toggle","aria-controls","Collapse","children","displayed","Notifier","useDispatch","notifications","useSelector","store","useSnackbar","closeSnackbar","dismissed","reason","myKey","onExited","removeSnackbar","filter","redText","primary","css","Container","div","Test","React","createContext","withRouter","wasLoginError","onTryAutoSignup","getItem","expirationTime","timeToExpirationInMilliseconds","routes","path","exact","component","Home","Puzzle","Leaderboards","Login","Register","ForgotPassword","Logout","setTheme","document","body","backgroundColor","Provider","Boolean","window","location","hostname","match","initialState","counter","reducer","results","deleteSnapshot","updatedResults","deleteElId","authStart","authFail","authLogout","defaultState","dismissAll","rootReducer","combineReducers","countReducer","resultsReducer","authReducer","notistackReducer","puzzleReducer","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","createStore","applyMiddleware","next","thunk","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.98e9c9c8.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/solving_demo.16f59787.gif\";","module.exports = __webpack_public_path__ + \"static/media/Rubik-Regular.09556186.ttf\";","import * as actionTypes from './actionTypes'\n\nexport const enqueueSnackbar = (notification) => {\n    const key = notification.options && notification.options.key\n\n    return {\n        type: actionTypes.ENQUEUE_SNACKBAR,\n        notification: {\n            ...notification,\n            key: key || new Date().getTime() + Math.random(),\n        },\n    }\n}\n\nexport const closeSnackbar = (key) => ({\n    type: actionTypes.CLOSE_SNACKBAR,\n    dismissAll: !key, // dismiss all if no key has been defined\n    key,\n})\n\nexport const removeSnackbar = (key) => ({\n    type: actionTypes.REMOVE_SNACKBAR,\n    key,\n})\n","export const INCREMENT = 'INCREMENT'\nexport const DECREMENT = 'DECREMENT'\nexport const ADD_5 = 'ADD_5'\nexport const SUBTRACT_5 = 'SUBTRACT_5'\nexport const DELETE_SNAPSHOT = 'DELETE_SNAPSHOT'\nexport const STORE_STATE = 'STORE_STATE'\n\nexport const AUTH_START = 'AUTH_START'\nexport const AUTH_SUCCESS = 'AUTH_SUCCESS'\nexport const AUTH_FAIL = 'AUTH_FAIL'\nexport const AUTH_LOGOUT = 'AUTH_LOGOUT'\nexport const UPDATE_USERNAME = 'UPDATE_USERNAME'\nexport const RESET_PASSWORD = 'RESET_PASSWORD'\nexport const RESET_PASSWORD_CONFIRMATION_EMAIL = 'RESET_PASSWORD_CONFIRMATION_EMAIL'\nexport const UPDATE_WAS_REDIRECTED = 'UPDATE_WAS_REDIRECTED'\n\nexport const ENQUEUE_SNACKBAR = 'ENQUEUE_SNACKBAR'\nexport const CLOSE_SNACKBAR = 'CLOSE_SNACKBAR'\nexport const REMOVE_SNACKBAR = 'REMOVE_SNACKBAR'\n\nexport const FLIP_PIECE = 'FLIP_PIECE'\nexport const SET_PUZZLE_STATE = 'SET_PUZZLE_STATE'\nexport const SET_PUZZLE_SIZE = 'SET_PUZZLE_SIZE'\nexport const SET_PUZZLE_DIFFICULTY = 'SET_PUZZLE_DIFFICULTY'\nexport const RESET_PUZZLE = 'RESET_PUZZLE'\nexport const SET_WAS_TOUCHED = 'SET_WAS_TOUCHED'\nexport const SET_COMPLETED = 'SET_COMPLETED'\nexport const INITIALIZE_SCORECARD = 'INITIALIZE_SCORECARD'\nexport const UPDATE_SCORECARD = 'UPDATE_SCORECARD'\nexport const UPDATE_SHOW_ONBOARDING = 'UPDATE_SHOW_ONBOARDING'\n","import firebase from 'firebase'\n\nconst firebaseConfig = {\n    apiKey: 'AIzaSyCsKQ7yGsAHGgucTb4NDPFJYBdt4xSjqWo',\n    authDomain: 'mediato-81951.firebaseapp.com',\n    databaseURL: 'https://mediato-81951.firebaseio.com',\n    projectId: 'mediato-81951',\n    storageBucket: 'mediato-81951.appspot.com',\n    messagingSenderId: '64661370432',\n    appId: '1:64661370432:web:42b19d7b8a8c3f4c36d1a5',\n    measurementId: 'G-C7LRKZ1P6F',\n}\n\nfirebase.initializeApp(firebaseConfig)\nconst db = firebase.firestore()\n\nexport default db\n","const PUZZLE_CONFIGS = [\n    ['easy', 'med', 'hard'],\n    ['easy', 'med', 'hard'],\n    ['easy', 'med', 'hard', 'vhard'],\n    ['easy', 'med', 'hard', 'vhard'],\n    ['easy', 'med', 'hard', 'vhard'],\n    ['easy', 'med', 'hard', 'vhard'],\n    ['easy', 'med', 'hard', 'vhard', 'xhard'],\n    ['easy', 'med', 'hard', 'vhard', 'xhard'],\n]\n\nexport const updateObject = (oldObject, updatedValues) => {\n    return {\n        ...oldObject,\n        ...updatedValues,\n    }\n}\n\nexport const flipPiece = (state, action) => {\n    let newPuzzleState = [...state.puzzleState]\n    newPuzzleState[action.index] = !state.puzzleState[action.index]\n    return updateObject(state, {\n        puzzleState: newPuzzleState,\n        wasTouched: true,\n    })\n}\n\nexport const setCompleted = (state, action) => {\n    let oldScorecard = { ...state.scorecard }\n    oldScorecard[action.size][action.difficulty] = true\n    return updateObject(state, oldScorecard)\n}\n\nexport const getNewScorecard = () => {\n    return {\n        3: {\n            easy: false,\n            med: false,\n            hard: false,\n        },\n        4: {\n            easy: false,\n            med: false,\n            hard: false,\n        },\n        5: {\n            easy: false,\n            med: false,\n            hard: false,\n            vhard: false,\n        },\n        6: {\n            easy: false,\n            med: false,\n            hard: false,\n            vhard: false,\n        },\n        7: {\n            easy: false,\n            med: false,\n            hard: false,\n            vhard: false,\n        },\n        8: {\n            easy: false,\n            med: false,\n            hard: false,\n            vhard: false,\n        },\n        9: {\n            easy: false,\n            med: false,\n            hard: false,\n            vhard: false,\n            xhard: false,\n        },\n        10: {\n            easy: false,\n            med: false,\n            hard: false,\n            vhard: false,\n            xhard: false,\n        },\n    }\n}\n\nexport const getNextPuzzleInLine = (scorecard) => {\n    const PUZZLE_CONFIGS = [\n        ['easy', 'med', 'hard'],\n        ['easy', 'med', 'hard'],\n        ['easy', 'med', 'hard', 'vhard'],\n        ['easy', 'med', 'hard', 'vhard'],\n        ['easy', 'med', 'hard', 'vhard'],\n        ['easy', 'med', 'hard', 'vhard'],\n        ['easy', 'med', 'hard', 'vhard', 'xhard'],\n        ['easy', 'med', 'hard', 'vhard', 'xhard'],\n    ]\n\n    for (let i = 0; i <= 7; i++) {\n        for (let j = 0; j < PUZZLE_CONFIGS[i].length; j++) {\n            let difficulty = PUZZLE_CONFIGS[i][j]\n            if (!scorecard[i + 3][difficulty]) {\n                return { size: i + 3, difficulty: difficulty }\n            }\n        }\n    }\n    return { size: 10, difficulty: 'xhard' }\n}\n\nexport const getNextDifficulty = (scorecard, size) => {\n    const zeroBasedSize = size - 3\n\n    for (let i = 0; i < PUZZLE_CONFIGS[zeroBasedSize].length; i++) {\n        if (!scorecard[size][PUZZLE_CONFIGS[zeroBasedSize][i]]) {\n            return PUZZLE_CONFIGS[zeroBasedSize][i]\n        }\n    }\n    return 'easy'\n}\n\nexport const getInitialPuzzleState = (size, difficulty) => {\n    const initial_states = {\n        3: {\n            easy: '000001011',\n            med: '011000011',\n            hard: '110000101',\n        },\n        4: {\n            easy: '0000000100110001',\n            med: '0000100111111001',\n            hard: '0000001101100100',\n        },\n        5: {\n            easy: '1010010100010000000000000',\n            med: '0000000100111100110001000',\n            hard: '0000000000000010110110100',\n            vhard: '0011110101100111011100101',\n        },\n        6: {\n            easy: '010100011110100100000000000000000000',\n            med: '100000110000110000011000100000100000',\n            hard: '000000100000110110100001011111000101',\n            vhard: '011100001011000000011100111111010001',\n        },\n        7: {\n            easy: '0000010000001000010010001100011000000100000000000',\n            med: '0000000000000010000100100101010011110000010001100',\n            hard: '0001100011100000011100011111011111000111100000100',\n            vhard: '1110000010011101000101111001001111100001100010100',\n        },\n        8: {\n            easy: '0000000000000000000100010011101100010001011010001010110000011000',\n            med: '0010001101110001001000000011000001011100000001100001010000000000',\n            hard: '1111110000001000110000010011001100111011001000110001101000000000',\n            vhard: '1011010010111111001111110001000110001010010110010100110110000010',\n        },\n        9: {\n            easy: '000000000010110000110001000010110000000000000100000000110010000110111000111010000',\n            med: '001110000000100000000100001101110011110000001101110010000100100000000110000000011',\n            hard: '001110000000100000000100001101110011110000001101110010000100100000000110000000011',\n            vhard: '010110010100001111101110110000001110111000101010001011100111101110111001111000011',\n            xhard: '001111000100101110110011011100100010011110111011011110110101011010101110111011000',\n        },\n        10: {\n            easy:\n                '0001111000100011110001000010000100000000110000000011100000000100000000000000000000000000000000000000',\n            med: '0000000000000000000000010000000011100000000110000001111100001001100000011000010000011011100010010100',\n            hard:\n                '0000000011000000010110100001111011011011101000000100010110010011100101000100010100000000000000000000',\n            vhard:\n                '0001010000011101101011111101110001110010110010000000110000001000100010101011011010101000010000000001',\n            xhard:\n                '0000000000100000101111000010011101010001111001011101000101001011010001011010101110011101011100110111',\n        },\n    }\n    return initial_states[size][difficulty]\n}\n","import db from './firestore'\nimport { getNewScorecard } from '../store/utility'\nimport { getCollection } from './utils'\n\nexport const firestoreUpdateCompletedPuzzle = async (email, size, difficulty) => {\n    const userRef = db.collection('users')\n    try {\n        let userSnapshot = await userRef.where('email', '==', email).get()\n        let targetDocId\n        let scorecard\n        userSnapshot.forEach((doc) => {\n            targetDocId = doc.id\n            scorecard = doc.data().scorecard\n        })\n        scorecard[size][difficulty] = true\n\n        userRef.doc(targetDocId).update({\n            scorecard: scorecard,\n        })\n    } catch (err) {\n        console.error(err)\n    }\n}\n\nexport const addNewUser = (email, username) => {\n    const newScorecard = getNewScorecard()\n\n    db.collection('users').add({\n        email,\n        username,\n        scorecard: newScorecard,\n        showOnboarding: true,\n    })\n}\n\nexport const getUserData = async (email) => {\n    const usersRef = db.collection('users')\n    let scorecard\n    let showOnboarding\n    let username\n    try {\n        let userDataSnapshot = await usersRef.where('email', '==', email).get()\n        userDataSnapshot.forEach((doc) => {\n            scorecard = doc.data().scorecard\n            showOnboarding = doc.data().showOnboarding\n            username = doc.data().username\n        })\n        return { scorecard, showOnboarding, username }\n    } catch (err) {\n        console.error(err)\n    }\n}\n\nexport const updateUserShowOnboarding = async (email, onboarding) => {\n    const userRef = db.collection('users')\n    try {\n        let userSnapshot = await userRef.where('email', '==', email).get()\n        let targetDocId\n        userSnapshot.forEach((doc) => {\n            targetDocId = doc.id\n        })\n\n        userRef.doc(targetDocId).update({\n            showOnboarding: onboarding,\n        })\n    } catch (err) {\n        console.error(err)\n    }\n}\n\nexport const addNewScore = (size, difficulty, username, movesToSolve) => {\n    const collection = `${size}_${difficulty}`\n    const collectionRef = db.collection(collection)\n    collectionRef.add({\n        username,\n        movesToSolve,\n    })\n}\n\nexport const setUserScore = async (size, difficulty, username, movesToSolve) => {\n    const collection = `${size}_${difficulty}`\n    const collectionRef = db.collection(collection)\n    try {\n        let userSnapshot = await collectionRef.where('username', '==', username).get()\n        let targetDocId\n        let previousBest\n\n        if (userSnapshot.empty) {\n            addNewScore(size, difficulty, username, movesToSolve)\n        } else {\n            userSnapshot.forEach((doc) => {\n                targetDocId = doc.id\n                previousBest = doc.data().movesToSolve\n            })\n\n            if (movesToSolve < previousBest) {\n                collectionRef.doc(targetDocId).update({\n                    movesToSolve: movesToSolve,\n                })\n            }\n        }\n    } catch (err) {\n        console.error(err)\n    }\n}\n\nexport const getLeaderboard = async (size, difficulty) => {\n    const collection = `${size}_${difficulty}`\n    const collectionRef = db.collection(collection)\n    try {\n        let leaderboardSnapshot = await collectionRef.orderBy('movesToSolve').limit(50).get()\n        let leaderboard = []\n\n        leaderboardSnapshot.forEach((doc) => {\n            leaderboard.push(doc.data())\n        })\n\n        return leaderboard\n    } catch (err) {\n        console.error(err)\n    }\n}\n\nexport const isUsernameTaken = async (username) => {\n    const collection = 'users'\n    const collectionRef = db.collection(collection)\n    try {\n        let userSnapshot = await collectionRef.where('username', '==', username).get()\n        return userSnapshot.empty\n    } catch (err) {\n        console.err(err)\n    }\n    return true\n}\n\nexport const doesEmailExist = async (email) => {\n    const collection = 'users'\n    const collectionRef = db.collection(collection)\n    try {\n        let userSnapshot = await collectionRef.where('email', '==', email).get()\n        return userSnapshot.empty\n    } catch (err) {\n        console.error(err)\n    }\n}\n","import * as actionTypes from './actionTypes'\nimport * as notistack from './notistack'\nimport axios from 'axios'\nimport { addNewUser, getUserData } from '../../firebase/tdg'\nimport { initializeScorecard, updateScorecard, updateLocalShowOnboarding } from './index'\nimport { getNextPuzzleInLine } from '../../store/utility'\nimport { setPuzzleSize, setPuzzleDifficulty } from './index'\n\nconst API_KEY = 'AIzaSyCsKQ7yGsAHGgucTb4NDPFJYBdt4xSjqWo'\n\nconst getErrorMessage = (error) => {\n    let errorMessage\n    switch (error) {\n        case 'EMAIL_NOT_FOUND':\n            errorMessage = 'Email not found. Please sign up! '\n            break\n        case 'INVALID_PASSWORD':\n            errorMessage = 'Invalid Email or Password'\n            break\n        case 'USER_DISABLED':\n            errorMessage = '🚨 User has been disabled. Please contact support.'\n            break\n        default:\n            errorMessage = '🤔 Something went wrong, please try again.'\n    }\n    return errorMessage\n}\n\nexport const authStart = () => {\n    return {\n        type: actionTypes.AUTH_START,\n    }\n}\n\nexport const updateUsername = (username) => {\n    return {\n        type: actionTypes.UPDATE_USERNAME,\n        username: username,\n    }\n}\n\nexport const updateWasRedirected = (wasRedirected) => {\n    return {\n        type: actionTypes.UPDATE_WAS_REDIRECTED,\n        wasRedirected: wasRedirected,\n    }\n}\n\nexport const authSuccess = (idToken, userId, email) => {\n    return {\n        type: actionTypes.AUTH_SUCCESS,\n        token: idToken,\n        userId: userId,\n        email: email,\n    }\n}\n\nexport const authFail = (error) => {\n    return {\n        type: actionTypes.AUTH_FAIL,\n        error: error,\n    }\n}\n\nexport const logoutHandler = () => {\n    return (dispatch) => {\n        dispatch(\n            notistack.enqueueSnackbar({\n                message: 'Successfully Logged Out!',\n                options: {\n                    key: new Date().getTime() + Math.random(),\n                    variant: 'success',\n                    autoHideDuration: 2500,\n                },\n            })\n        )\n        dispatch(logout())\n    }\n}\n\nexport const logout = () => {\n    return (dispatch) => {\n        dispatch(logoutHelper())\n        dispatch(initializeScorecard())\n        dispatch(setPuzzleSize(3))\n        dispatch(setPuzzleDifficulty('easy'))\n    }\n}\n\nconst logoutHelper = () => {\n    localStorage.removeItem('expirationDate')\n    localStorage.removeItem('token')\n    localStorage.removeItem('userId')\n    localStorage.removeItem('email')\n    return {\n        type: actionTypes.AUTH_LOGOUT,\n    }\n}\n\nexport const checkAuthTimeout = (expiresIn) => {\n    return (dispatch) => {\n        setTimeout(() => {\n            dispatch(logout())\n        }, expiresIn * 1000)\n    }\n}\n\nexport const auth = (email, password, isLogin, username) => {\n    return (dispatch) => {\n        dispatch(authStart())\n\n        const userData = {\n            email: email,\n            password: password,\n            returnSecureToken: true,\n        }\n\n        const url = isLogin\n            ? 'https://identitytoolkit.googleapis.com/v1/accounts:signInWithPassword?key=AIzaSyCsKQ7yGsAHGgucTb4NDPFJYBdt4xSjqWo'\n            : 'https://identitytoolkit.googleapis.com/v1/accounts:signUp?key=AIzaSyCsKQ7yGsAHGgucTb4NDPFJYBdt4xSjqWo'\n\n        axios\n            .post(url, userData)\n            .then((response) => {\n                const expirationDate = new Date(new Date().getTime() + response.data.expiresIn * 1000)\n                localStorage.setItem('token', response.data.idToken)\n                localStorage.setItem('expirationDate', expirationDate)\n                localStorage.setItem('userId', response.data.localId)\n                localStorage.setItem('email', userData.email)\n                dispatch(authSuccess(response.data.idToken, response.data.localId, userData.email))\n                isLogin ? handleLogin(dispatch, userData.email) : handleRegistration(dispatch, userData.email, username)\n\n                dispatch(checkAuthTimeout(response.data.expiresIn))\n            })\n            .catch((err) => {\n                try {\n                    const errorMessage = getErrorMessage(err.response.data.error.message)\n                    dispatch(\n                        notistack.enqueueSnackbar({\n                            message: errorMessage,\n                            options: {\n                                key: new Date().getTime() + Math.random(),\n                                variant: 'error',\n                                autoHideDuration: 2500,\n                            },\n                        })\n                    )\n                    dispatch(authFail(err.response.data.error.message))\n                } catch (err) {\n                    console.error(err)\n                }\n            })\n    }\n}\n\nconst handleLogin = async (dispatch, email) => {\n    const { scorecard, showOnboarding, username } = await getUserData(email)\n    dispatch(updateUsername(username))\n    dispatch(updateScorecard(scorecard))\n    const { size, difficulty } = getNextPuzzleInLine(scorecard)\n    dispatch(setPuzzleSize(size))\n    dispatch(updateLocalShowOnboarding(showOnboarding))\n    dispatch(\n        notistack.enqueueSnackbar({\n            message: 'Welcome Back!',\n            options: {\n                key: new Date().getTime() + Math.random(),\n                variant: 'success',\n                autoHideDuration: 2500,\n            },\n        })\n    )\n    dispatch(setPuzzleDifficulty(difficulty))\n}\n\nconst handleRegistration = (dispatch, email, username) => {\n    addNewUser(email, username)\n    dispatch(initializeScorecard())\n    dispatch(updateLocalShowOnboarding(true))\n    dispatch(updateUsername(username))\n    dispatch(\n        notistack.enqueueSnackbar({\n            message: 'Welcome To Square Solve!',\n            options: {\n                key: new Date().getTime() + Math.random(),\n                variant: 'success',\n                autoHideDuration: 2500,\n            },\n        })\n    )\n}\n\nexport const authCheckState = () => {\n    return (dispatch) => {\n        const token = localStorage.getItem('token')\n        const email = localStorage.getItem('email')\n        if (!token || !email) {\n            dispatch(logout())\n        } else {\n            const expirationTime = new Date(localStorage.getItem('expirationDate'))\n            if (expirationTime <= new Date()) {\n                dispatch(logout())\n            } else {\n                const userId = localStorage.getItem('userId')\n                dispatch(authSuccess(token, userId, email))\n                const timeToExpirationInMilliseconds = (expirationTime.getTime() - new Date().getTime()) / 1000\n                handleLogin(dispatch, email)\n                dispatch(checkAuthTimeout(timeToExpirationInMilliseconds))\n            }\n        }\n    }\n}\n\nexport const resetPassword = (email) => {\n    return (dispatch) => {\n        const requestPayload = {\n            requestType: 'PASSWORD_RESET',\n            email: email,\n        }\n\n        const url = `https://identitytoolkit.googleapis.com/v1/accounts:sendOobCode?key=${API_KEY}`\n\n        axios\n            .post(url, requestPayload)\n            .then((response) => {\n                const userEmailConfirmation = response.data.email\n                dispatch(resetPasswordConfirmation(userEmailConfirmation))\n                dispatch(\n                    notistack.enqueueSnackbar({\n                        message: 'Password reset email sent.',\n                        options: {\n                            key: new Date().getTime() + Math.random(),\n                            variant: 'success',\n                            autoHideDuration: 2500,\n                        },\n                    })\n                )\n            })\n            .catch((err) => {\n                console.error(err)\n            })\n    }\n}\n\nexport const resetPasswordConfirmation = (email) => {\n    return {\n        type: actionTypes.RESET_PASSWORD_CONFIRMATION_EMAIL,\n        email: email,\n    }\n}\n\nconst getNextLevel = (scorecard) => {}\n","export const range = (end) =>\n    Array.from(\n        (function* () {\n            let start = 0\n            while (start < end) yield start++\n        })()\n    )\n","import * as actionTypes from './actionTypes'\nimport { range } from '../../utils/iteration/python'\nimport { firestoreUpdateCompletedPuzzle, updateUserShowOnboarding, setUserScore } from '../../firebase/tdg'\n\nexport const flipPiece = (state, index, size) => {\n    return (dispatch) => {\n        const neighbours = getNeighbours(Number(size), state, index)\n        neighbours.push(index)\n        neighbours.forEach((idx) => {\n            dispatch(flipIndex(idx))\n        })\n    }\n}\n\nexport const flipIndex = (index) => {\n    return {\n        type: actionTypes.FLIP_PIECE,\n        index: index,\n    }\n}\n\nexport const setPuzzleState = (state) => {\n    return {\n        type: actionTypes.SET_PUZZLE_STATE,\n        newState: state,\n    }\n}\n\nexport const setPuzzleSize = (size) => {\n    return {\n        type: actionTypes.SET_PUZZLE_SIZE,\n        size: size,\n    }\n}\n\nexport const setPuzzleDifficulty = (difficulty) => {\n    return {\n        type: actionTypes.SET_PUZZLE_DIFFICULTY,\n        difficulty: difficulty,\n    }\n}\n\nexport const changePuzzleSize = (size) => {\n    return (dispatch) => {\n        dispatch(setPuzzleSize(size))\n    }\n}\n\nexport const resetPuzzle = (puzzleSize) => {\n    const newState = range(Math.pow(puzzleSize, 2)).map(() => false)\n    return setPuzzleState(newState)\n}\n\nexport const setWasTouched = (wasTouched) => {\n    return {\n        type: actionTypes.SET_WAS_TOUCHED,\n        wasTouched: wasTouched,\n    }\n}\n\nexport const updateCompletedPuzzle = (size, difficulty, email, username, movesToSolve, isAuthenticated) => {\n    return (dispatch) => {\n        if (isAuthenticated) {\n            firestoreUpdateCompletedPuzzle(email, size, difficulty)\n            setUserScore(size, difficulty, username, movesToSolve)\n        }\n        dispatch(updateCompletedPuzzleLocal(size, difficulty))\n    }\n}\n\nconst updateCompletedPuzzleLocal = (size, difficulty) => {\n    return {\n        type: actionTypes.SET_COMPLETED,\n        size: size,\n        difficulty: difficulty,\n    }\n}\n\nexport const initializeScorecard = () => {\n    return {\n        type: actionTypes.INITIALIZE_SCORECARD,\n    }\n}\n\nexport const updateScorecard = (newScorecard) => {\n    return {\n        type: actionTypes.UPDATE_SCORECARD,\n        scorecard: newScorecard,\n    }\n}\n\nexport const updateShowOnboarding = (email, showOnboarding) => {\n    return (dispatch) => {\n        dispatch(updateLocalShowOnboarding(showOnboarding))\n        updateUserShowOnboarding(email, showOnboarding)\n    }\n}\n\nexport const updateLocalShowOnboarding = (showOnboarding) => {\n    return {\n        type: actionTypes.UPDATE_SHOW_ONBOARDING,\n        showOnboarding: showOnboarding,\n    }\n}\n\nconst getNeighbours = (size, state, target) => {\n    let tentative_neighbours = []\n    if (target % size == 0) {\n        tentative_neighbours = [target - size, target + size, target + 1]\n    } else if (target % size == size - 1) {\n        tentative_neighbours = [target - size, target + size, target - 1]\n    } else {\n        tentative_neighbours = [target + 1, target - 1, target + size, target - size]\n    }\n\n    let correct_neighbours = []\n    tentative_neighbours.forEach((el) => {\n        if (0 <= el && el < state.length) {\n            correct_neighbours.push(el)\n        }\n    })\n\n    return correct_neighbours\n}\n","import React, { useContext } from 'react'\nimport * as actions from '../../../store/actions/index'\nimport { connect } from 'react-redux'\nimport { Formik } from 'formik'\nimport { Form, Button } from 'react-bootstrap'\nimport * as yup from 'yup'\nimport { LinkContainer } from 'react-router-bootstrap'\nimport { ThemeContext } from '../../../containers/App'\n\nconst initialValues = { email: '', password: '' }\nconst validationSchema = yup.object().shape({\n    email: yup.string().email().required('Please enter an email'),\n    password: yup\n        .string()\n        .min(5, 'Password must be at least 5 characters')\n        .max(50, 'Password must be at most 50 characters')\n        .required('Please enter a password'),\n})\n\nconst Login = ({ onAuth, error }) => {\n    const theme = useContext(ThemeContext)\n\n    return (\n        <div className='horizontal-center'>\n            <div className='vertical-center'>\n                <Formik\n                    validationSchema={validationSchema}\n                    onSubmit={(event) => onAuth(event.email, event.password, true)}\n                    initialValues={initialValues}>\n                    {({ values, errors, touched, handleChange, handleBlur, handleSubmit, isSubmitting }) => (\n                        <Form noValidate onSubmit={handleSubmit} className='centered-form'>\n                            <Form.Group>\n                                <Form.Label className={'navlinks_' + theme.theme}>Email</Form.Label>\n                                <Form.Control\n                                    className={'navlinks_' + theme.theme}\n                                    required\n                                    size='sm'\n                                    type='text'\n                                    name='email'\n                                    placeholder='Email'\n                                    value={values.email}\n                                    onChange={handleChange}\n                                    onBlur={handleBlur}\n                                    isValid={touched.email && !errors.email}\n                                    isInvalid={touched.email && errors.email}\n                                />\n                                <Form.Control.Feedback type='invalid'>{errors.email}</Form.Control.Feedback>\n                            </Form.Group>\n                            <Form.Group size='sm'>\n                                <Form.Label className={'navlinks_' + theme.theme}>Password</Form.Label>\n                                <Form.Control\n                                    className={'navlinks_' + theme.theme}\n                                    required\n                                    size='sm'\n                                    type='password'\n                                    name='password'\n                                    placeholder='Password'\n                                    value={values.password}\n                                    onChange={handleChange}\n                                    onBlur={handleBlur}\n                                    isValid={touched.password && !errors.password}\n                                    isInvalid={touched.password && errors.password}\n                                />\n                                <Form.Control.Feedback type='invalid'>{errors.password}</Form.Control.Feedback>\n                            </Form.Group>\n                            <Button size='sm' type='submit'>\n                                Login\n                            </Button>{' '}\n                            <LinkContainer to='/forgotpassword'>\n                                <Button size='sm' variant='link'>\n                                    Forgot Password\n                                </Button>\n                            </LinkContainer>\n                        </Form>\n                    )}\n                </Formik>\n            </div>\n        </div>\n    )\n}\n\nconst mapStateToProps = (state) => {\n    return {\n        loading: state.auth.loading,\n        error: state.auth.error,\n    }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n    return {\n        onAuth: (email, password, isLogin) => dispatch(actions.auth(email, password, isLogin)),\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Login)\n","import React, { useContext } from 'react'\nimport * as actions from '../../../store/actions/index'\nimport { connect } from 'react-redux'\nimport { Formik } from 'formik'\nimport { Form, Button } from 'react-bootstrap'\nimport * as yup from 'yup'\nimport { isUsernameTaken, doesEmailExist } from '../../../firebase/tdg'\nimport { ThemeContext } from '../../../containers/App'\nimport styled from 'styled-components'\n\nconst initialValues = { email: '', password: '', confirmPassword: '', username: '' }\nconst validationSchema = yup.object().shape({\n    email: yup\n        .string()\n        .email()\n        .required('Please enter an email.')\n        .test('Check if email exists', 'An account with this email already exists.', function (value) {\n            if (!value) {\n                return false\n            } else {\n                return doesEmailExist(value)\n            }\n        }),\n    password: yup\n        .string()\n        .min(5, 'Password must be at least 5 characters')\n        .max(50, 'Password must be at most 50 characters')\n        .required('Please enter a password'),\n    confirmPassword: yup\n        .string()\n        .required('Please confirm password')\n        .when('password', {\n            is: (val) => (val && val.length > 0 ? true : false),\n            then: yup.string().oneOf([yup.ref('password')], 'Both passwords need to be the same'),\n        }),\n    username: yup\n        .string()\n        .required()\n        .min(5, 'Username must be at least 5 characters')\n        .max(30, 'Username cannot be longer than 50 characters')\n        .test('test-name', 'Username is already taken', function (value) {\n            if (!value) {\n                return false\n            } else {\n                return isUsernameTaken(value)\n            }\n        }),\n})\n\nconst Button_ = styled.button``\n\nconst Register = ({ onAuth, error }) => {\n    const theme = useContext(ThemeContext)\n\n    return (\n        <div className='horizontal-center'>\n            <div className='vertical-center'>\n                <Formik\n                    validationSchema={validationSchema}\n                    onSubmit={(event) => onAuth(event.email, event.password, false, event.username)}\n                    initialValues={initialValues}>\n                    {({ values, errors, touched, handleChange, handleBlur, handleSubmit, isSubmitting }) => (\n                        <Form noValidate onSubmit={handleSubmit} className='centered-form'>\n                            <Form.Group>\n                                <Form.Label className={'navlinks_' + theme.theme}>Email</Form.Label>\n                                <Form.Control\n                                    className={'navlinks_' + theme.theme}\n                                    required\n                                    size='sm'\n                                    type='text'\n                                    name='email'\n                                    placeholder='Email'\n                                    value={values.email}\n                                    onChange={handleChange}\n                                    onBlur={handleBlur}\n                                    isValid={touched.email && !errors.email}\n                                    isInvalid={touched.email && errors.email}\n                                />\n                                <Form.Control.Feedback type='invalid' className={'navlinks_' + theme.theme}>\n                                    {errors.email}\n                                </Form.Control.Feedback>\n                            </Form.Group>\n                            <Form.Group size='sm'>\n                                <Form.Label className={'navlinks_' + theme.theme}>Password</Form.Label>\n                                <Form.Control\n                                    className={'navlinks_' + theme.theme}\n                                    required\n                                    size='sm'\n                                    type='password'\n                                    name='password'\n                                    placeholder='Password'\n                                    value={values.password}\n                                    onChange={handleChange}\n                                    onBlur={handleBlur}\n                                    isValid={touched.password && !errors.password}\n                                    isInvalid={touched.password && errors.password}\n                                />\n                                <Form.Control.Feedback type='invalid' className={'navlinks_' + theme.theme}>\n                                    {errors.password}\n                                </Form.Control.Feedback>\n                            </Form.Group>\n                            <Form.Group size='sm'>\n                                <Form.Label className={'navlinks_' + theme.theme}>Confirm Password</Form.Label>\n                                <Form.Control\n                                    className={'navlinks_' + theme.theme}\n                                    required\n                                    size='sm'\n                                    type='password'\n                                    name='confirmPassword'\n                                    placeholder='Confirm Password'\n                                    value={values.confirmPassword}\n                                    onChange={handleChange}\n                                    onBlur={handleBlur}\n                                    isValid={touched.confirmPassword && !errors.confirmPassword}\n                                    isInvalid={touched.confirmPassword && errors.confirmPassword}\n                                />\n                                <Form.Control.Feedback type='invalid' className={'navlinks_' + theme.theme}>\n                                    {errors.confirmPassword}\n                                </Form.Control.Feedback>\n                            </Form.Group>\n                            <Form.Group size='sm'>\n                                <Form.Label className={'navlinks_' + theme.theme}>Username</Form.Label>\n                                <Form.Control\n                                    className={'navlinks_' + theme.theme}\n                                    required\n                                    size='sm'\n                                    type='text'\n                                    name='username'\n                                    placeholder='Username'\n                                    value={values.username}\n                                    onChange={handleChange}\n                                    onBlur={handleBlur}\n                                    isValid={touched.username && !errors.username}\n                                    isInvalid={touched.username && errors.username}\n                                />\n                                <Form.Control.Feedback type='invalid' className={'navlinks_' + theme.theme}>\n                                    {errors.username}\n                                </Form.Control.Feedback>\n                            </Form.Group>\n                            <Button size='sm' type='submit'>\n                                Sign Up\n                            </Button>\n                        </Form>\n                    )}\n                </Formik>\n                console.log(Button_)\n            </div>\n        </div>\n    )\n}\n\nconst mapStateToProps = (state) => {\n    return {\n        loading: state.auth.loading,\n        error: state.auth.error,\n    }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n    return {\n        onAuth: (email, password, isLogin, username) => dispatch(actions.auth(email, password, isLogin, username)),\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Register)\n","import React, { useEffect } from 'react'\nimport { connect } from 'react-redux'\nimport * as actionTypes from '../../../store/actions/index'\nimport { Redirect } from 'react-router-dom'\n\nconst Logout = ({ onLogout }) => {\n    useEffect(() => {\n        onLogout()\n    }, [])\n\n    return <Redirect to='/' />\n}\n\nconst mapDispatchToProps = (dispatch) => {\n    return {\n        onLogout: () => {\n            dispatch(actionTypes.logoutHandler())\n        },\n    }\n}\n\nexport default connect(null, mapDispatchToProps)(Logout)\n","import React, { useEffect } from 'react'\nimport * as actions from '../../../store/actions/index'\nimport { connect } from 'react-redux'\nimport { Formik } from 'formik'\nimport { Form, Button } from 'react-bootstrap'\nimport * as yup from 'yup'\n\nconst initialValues = { email: '' }\nconst validationSchema = yup.object().shape({\n    email: yup.string().email().required('Please enter an email'),\n})\n\nconst ResetPassword = ({ onResetPassword, resetEmail, ownProps, setResetPasswordConfirmation }) => {\n    useEffect(() => {\n        if (resetEmail !== null) {\n            const resetEmailFeedback = `Reset email was successfully sent to ${resetEmail}. Follow instructions in email to reset password.`\n            ownProps.history.push('/auth')\n            setResetPasswordConfirmation(null)\n        }\n    }, [resetEmail])\n\n    return (\n        <div className='horizontal-center'>\n            <div className='vertical-center'>\n                <Formik\n                    validationSchema={validationSchema}\n                    onSubmit={(event) => onResetPassword(event.email)}\n                    initialValues={initialValues}>\n                    {({ values, errors, touched, handleChange, handleBlur, handleSubmit, isSubmitting }) => (\n                        <Form noValidate onSubmit={handleSubmit} className='centered-form'>\n                            <Form.Group>\n                                <Form.Label>Email</Form.Label>\n                                <Form.Control\n                                    required\n                                    size='sm'\n                                    type='text'\n                                    name='email'\n                                    placeholder='Email'\n                                    value={values.email}\n                                    onChange={handleChange}\n                                    onBlur={handleBlur}\n                                    isValid={touched.email && !errors.email}\n                                    isInvalid={touched.email && errors.email}\n                                />\n                                <Form.Control.Feedback type='invalid'>{errors.email}</Form.Control.Feedback>\n                            </Form.Group>\n                            <Button size='sm' type='submit' variant='outline-primary'>\n                                Send reset email\n                            </Button>\n                        </Form>\n                    )}\n                </Formik>\n            </div>\n        </div>\n    )\n}\n\nconst mapStateToProps = (state, ownProps) => {\n    return {\n        resetEmail: state.auth.resetPasswordConfirmation,\n        ownProps: ownProps,\n    }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n    return {\n        onResetPassword: (email) => dispatch(actions.resetPassword(email)),\n        setResetPasswordConfirmation: (email) => dispatch(actions.resetPasswordConfirmation(email)),\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ResetPassword)\n","import React from 'react'\nimport { ButtonGroup, Button } from 'react-bootstrap'\n\nconst SizeSelector = (props) => {\n    const isLevelComplete = (level) => {\n        const difficultiesCompleted = Object.values(props.scorecard[level])\n        return !difficultiesCompleted.includes(false)\n    }\n\n    return (\n        <ButtonGroup>\n            <Button\n                variant={isLevelComplete(3) ? 'success' : 'primary'}\n                active={3 === props.selectedSize}\n                onClick={() => props.handleClick(3)}>\n                {isLevelComplete(3) ? '✔️' : '1'}\n            </Button>\n            <Button\n                active={4 === props.selectedSize}\n                onClick={() => props.handleClick(4)}\n                variant={isLevelComplete(4) ? 'success' : 'primary'}>\n                {isLevelComplete(4) ? '✔️' : '2'}\n            </Button>\n            <Button\n                active={5 === props.selectedSize}\n                onClick={() => props.handleClick(5)}\n                variant={isLevelComplete(5) ? 'success' : 'primary'}>\n                {isLevelComplete(5) ? '✔️' : '3'}\n            </Button>\n            <Button\n                active={6 === props.selectedSize}\n                onClick={() => props.handleClick(6)}\n                variant={isLevelComplete(6) ? 'success' : 'primary'}>\n                {isLevelComplete(6) ? '✔️' : '4'}\n            </Button>\n            <Button\n                active={7 === props.selectedSize}\n                onClick={() => props.handleClick(7)}\n                variant={isLevelComplete(7) ? 'success' : 'primary'}>\n                {isLevelComplete(7) ? '✔️' : '5'}\n            </Button>\n            <Button\n                active={8 === props.selectedSize}\n                onClick={() => props.handleClick(8)}\n                variant={isLevelComplete(8) ? 'success' : 'primary'}>\n                {isLevelComplete(8) ? '✔️' : '6'}\n            </Button>\n            <Button\n                active={9 === props.selectedSize}\n                onClick={() => props.handleClick(9)}\n                variant={isLevelComplete(9) ? 'success' : 'primary'}>\n                {isLevelComplete(9) ? '✔️' : '7'}\n            </Button>\n            <Button\n                active={10 === props.selectedSize}\n                onClick={() => props.handleClick(10)}\n                variant={isLevelComplete(10) ? 'success' : 'primary'}>\n                {isLevelComplete(10) ? '✔️' : '8'}\n            </Button>\n        </ButtonGroup>\n    )\n}\n\nexport default SizeSelector\n","import React, { useContext } from 'react'\nimport { Table } from 'react-bootstrap'\nimport { range } from '../../../utils/iteration/python'\nimport { ThemeContext } from '../../../containers/App'\n\nconst LeaderboardsTable = (props) => {\n    const theme = useContext(ThemeContext)\n\n    const getTableRow = (i, data) => {\n        return (\n            <tr className={'table-body_' + theme.theme}>\n                <td>{i + 1}</td>\n                <td>{data['username']}</td>\n                <td>{data['movesToSolve']}</td>\n            </tr>\n        )\n    }\n\n    let tableRows = range(props.records.length)\n        .map((el) => {\n            return getTableRow(el, props.records[el])\n        })\n        .reduce((accumulator, el) => accumulator.concat(el), [])\n\n    if (tableRows.length === 0) {\n        tableRows = (\n            <tr className={'table-body_' + theme.theme}>\n                <td colspan='3'>No one has completed this puzzle yet 🤯</td>\n            </tr>\n        )\n    }\n\n    const table = (\n        <Table striped bordered hover>\n            <thead>\n                <tr className={'alert-warning_' + theme.theme}>\n                    <th>#</th>\n                    <th>username</th>\n                    <th>moves to solve</th>\n                </tr>\n            </thead>\n            <tbody className={'table-body_' + theme.theme}>{tableRows}</tbody>\n        </Table>\n    )\n\n    return table\n}\n\nexport default LeaderboardsTable\n","import React from 'react'\nimport { GuardSpinner } from 'react-spinners-kit'\n\nconst CircularProgress = () => {\n    const spinnerStyle = {\n        position: 'absolute',\n        left: '50%',\n        top: '70px',\n        transform: 'translate(-50%, -50%)',\n    }\n\n    return (\n        <div style={spinnerStyle}>\n            <GuardSpinner frontColor='#e14594' backColor='#2b3595' size='50' />\n        </div>\n    )\n}\n\nexport default CircularProgress\n","import React, { useEffect, useState, useContext } from 'react'\nimport { Row, Col, Alert, Form, Button, ButtonGroup, Spinner, Table } from 'react-bootstrap'\nimport { connect } from 'react-redux'\nimport * as actions from '../../../store/actions/index'\nimport SizeSelector from '../Puzzle/Components/SizeSelector'\nimport { getLeaderboard } from '../../../firebase/tdg'\nimport LeaderboardsTable from './LeaderboardsTable'\nimport { getNewScorecard } from '../../../store/utility'\nimport CircularProgress from '../../../components/UI/Loading/CircularProgress'\nimport { ThemeContext } from '../../../containers/App'\n\nconst Leaderboards = ({ scorecard, email, username, isAuthenticated }) => {\n    const theme = useContext(ThemeContext)\n\n    const customSpacingLarge = {\n        marginBottom: '4%',\n    }\n\n    const [level, setLevel] = useState(3)\n    const [difficulty, setDifficulty] = useState('easy')\n\n    const [isLoading, setIsLoading] = useState(false)\n    const [records, setRecords] = useState([])\n\n    const handleChangeLevel = (level) => {\n        setDifficulty('easy')\n        setLevel(level)\n    }\n\n    const blankScorecard = getNewScorecard()\n\n    const generateEasyPuzzleButton = (\n        <Button onClick={() => setDifficulty('easy')} active={difficulty === 'easy'}>\n            easy\n        </Button>\n    )\n\n    const generateMediumPuzzleButton = (\n        <Button onClick={() => setDifficulty('med')} active={difficulty === 'med'}>\n            medium\n        </Button>\n    )\n\n    const generateHardPuzzleButton = (\n        <Button onClick={() => setDifficulty('hard')} active={difficulty === 'hard'}>\n            hard\n        </Button>\n    )\n\n    const generateVeryHardPuzzleButton = (\n        <Button onClick={() => setDifficulty('vhard')} active={difficulty === 'vhard'}>\n            very hard\n        </Button>\n    )\n\n    const generateImpossiblePuzzleButton = (\n        <Button onClick={() => setDifficulty('xhard')} active={difficulty === 'xhard'}>\n            ☠️\n        </Button>\n    )\n\n    const customSpacing = {\n        marginBottom: '20px',\n    }\n\n    const customSpacingSmall = {\n        marginBottom: '0px',\n    }\n\n    useEffect(() => {\n        setIsLoading(true)\n        const scores = getLeaderboard(level, difficulty).then((result) => {\n            setRecords(result)\n            setIsLoading(false)\n        })\n    }, [level, difficulty])\n\n    return (\n        <React.Fragment>\n            <div>\n                <Row>\n                    <Col sm='3'></Col>\n                    <Col sm='6'>\n                        <h1 className={'navlinks_' + theme.theme}>Leaderboards</h1>\n                    </Col>\n                    <Col sm='3'></Col>\n                </Row>\n                <div style={customSpacingLarge}></div>\n                <Row>\n                    <Col sm='3'></Col>\n                    <Col sm='6'>\n                        <Form>\n                            <Form.Group as={Row}>\n                                <Form.Label column sm='3'>\n                                    <strong className={'navlinks_' + theme.theme}>level</strong>\n                                </Form.Label>\n                                <Col sm='9'>\n                                    <SizeSelector\n                                        selectedSize={level}\n                                        scorecard={blankScorecard}\n                                        handleClick={handleChangeLevel}\n                                    />\n                                </Col>\n                            </Form.Group>\n                        </Form>\n                    </Col>\n                    <Col sm='3'></Col>\n                </Row>\n                <div style={customSpacingSmall}></div>\n                <Row>\n                    <Col sm='3'></Col>\n                    <Col sm='6'>\n                        <Form>\n                            <Form.Group as={Row}>\n                                <Form.Label column sm='3'>\n                                    <strong className={'navlinks_' + theme.theme}>difficulty</strong>\n                                </Form.Label>\n                                <Col sm='9'>\n                                    <ButtonGroup>\n                                        {generateEasyPuzzleButton} {generateMediumPuzzleButton}{' '}\n                                        {generateHardPuzzleButton} {level > 4 && generateVeryHardPuzzleButton}{' '}\n                                        {level > 8 && generateImpossiblePuzzleButton}\n                                    </ButtonGroup>\n                                </Col>\n                            </Form.Group>\n                        </Form>\n                    </Col>\n                    <Col sm='3'></Col>\n                </Row>\n                <div style={customSpacing}></div>\n                <Row>\n                    <Col sm='3'></Col>\n                    <Col sm='6'>{isLoading ? <CircularProgress /> : <LeaderboardsTable records={records} />}</Col>\n                    <Col sm='3'></Col>\n                </Row>\n            </div>\n        </React.Fragment>\n    )\n}\n\nconst mapStateToProps = (state) => {\n    return {\n        scorecard: state.puzzle.scorecard,\n        email: state.auth.email,\n        isAuthenticated: state.auth.token !== null,\n        username: state.auth.username,\n    }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n    return {}\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Leaderboards)\n","import React, { useState, useEffect, useContext } from 'react'\nimport { Row, Col, Alert, Image, Button } from 'react-bootstrap'\nimport solving_demo from './static_files/solving_demo.gif'\nimport { LinkContainer } from 'react-router-bootstrap'\nimport { connect } from 'react-redux'\nimport { useHistory } from 'react-router-dom'\nimport * as actions from '../../../store/actions/index'\nimport { ThemeContext } from '../../App'\n\nconst Home = ({ isAuthenticated, wasRedirected, updateWasRedirected }) => {\n    const history = useHistory()\n    const [showOnboarding, setShowOnboarding] = useState(true)\n    const theme = useContext(ThemeContext)\n\n    useEffect(() => {\n        if (isAuthenticated && !wasRedirected) {\n            updateWasRedirected(true)\n            history.push('/puzzle')\n        }\n    }, [isAuthenticated])\n\n    const customSpacing = {\n        marginBottom: '20px',\n    }\n    const customSpacingLarge = {\n        marginBottom: '4%',\n    }\n\n    return (\n        <div>\n            <div style={customSpacing}></div>\n            <Row>\n                <Col sm='1'></Col>\n                <Col sm='10'>\n                    <Row>\n                        <Col sm='2'></Col>\n                        <Col sm='8'>\n                            <Alert\n                                className={'alert-warning' + '_' + theme.theme}\n                                show={showOnboarding}\n                                variant='primary'\n                                onClose={() => setShowOnboarding(false)}\n                                dismissible>\n                                <Alert.Heading>👋 welcome to square solve </Alert.Heading>\n                                <p>\n                                    Solve the puzzle by turning all the pieces blue. Flipping a piece, will also flip\n                                    all adjacent pieces.\n                                </p>\n                            </Alert>\n                        </Col>\n                        <Col sm='2'></Col>\n                    </Row>\n                </Col>\n                <Col sm='1'></Col>\n            </Row>\n            <div style={customSpacing}></div>\n            <Row>\n                <Col sm='1'></Col>\n                <Col sm='10'>\n                    <Row>\n                        <Col sm='2'></Col>\n                        <Col sm='8'>\n                            <Image fluid src={solving_demo}></Image>\n                            <div style={customSpacingLarge}></div>\n                            <LinkContainer to='/puzzle' style={{ float: 'right' }}>\n                                <Button size='lg' variant='success'>\n                                    start playing 👆\n                                </Button>\n                            </LinkContainer>\n                        </Col>\n                        <Col sm='2'></Col>\n                    </Row>\n                </Col>\n                <Col sm='1'></Col>\n            </Row>\n            <div style={customSpacingLarge}></div>\n        </div>\n    )\n}\n\nconst mapStateToProps = (state) => {\n    return {\n        isAuthenticated: state.auth.token !== null,\n        wasRedirected: state.auth.wasRedirected,\n    }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n    return {\n        updateWasRedirected: (wasRedirected) => {\n            dispatch(actions.updateWasRedirected(wasRedirected))\n        },\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Home)\n","import React, { useState, useContext } from 'react'\nimport ReactCardFlip from 'react-card-flip'\nimport { connect } from 'react-redux'\nimport * as actions from '../../../../store/actions/index'\nimport classes from './Piece.css'\nimport { ThemeContext } from '../../../App'\n\nconst Piece = ({ puzzleState, props, flipPiece, puzzleSize }) => {\n    const theme = useContext(ThemeContext)\n\n    const handleFlip = () => {\n        flipPiece(puzzleState, props.index, puzzleSize)\n        props.incrementMovesMade()\n    }\n\n    return (\n        <ReactCardFlip className='anotherClass' isFlipped={puzzleState[props.index]} flipDirection='vertical'>\n            <div className={'side-one_' + theme.theme + ' puzzle-piece'} onClick={handleFlip}></div>\n            <div className={'side-two_' + theme.theme + ' puzzle-piece'} onClick={handleFlip}></div>\n        </ReactCardFlip>\n    )\n}\n\nconst mapStateToProps = (state, ownProps) => {\n    return {\n        puzzleState: state.puzzle.puzzleState,\n        puzzleSize: state.puzzle.puzzleSize,\n        props: ownProps,\n    }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n    return {\n        flipPiece: (state, index, size) => dispatch(actions.flipPiece(state, index, size)),\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Piece)\n","import React, { useState, useEffect } from 'react'\nimport Piece from '../Components/Piece'\nimport * as actions from '../../../../store/actions/index'\nimport { connect } from 'react-redux'\nimport { range } from '../../../../utils/iteration/python'\nimport classes from './Board.css'\nimport { getNextDifficulty } from '../../../../store/utility'\n\nconst Board = ({ props, puzzleSize, scorecard, resetPuzzle, setPuzzleState }) => {\n    useEffect(() => {\n        const nextDifficulty = getNextDifficulty(scorecard, puzzleSize)\n        props.handleGeneratePuzzle(puzzleSize, nextDifficulty)\n    }, [puzzleSize])\n\n    const tableStyle = {\n        boarder: '2px solid black',\n        width: '100%',\n    }\n\n    const tdStyle = {\n        position: 'relative',\n        width: `${100 / props.puzzleSize}%`,\n        height: `${100 / props.puzzleSize}%`,\n        paddingTop: `${100 / props.puzzleSize}%`,\n    }\n\n    const tableData = (i) => {\n        return (\n            <td style={tdStyle}>\n                <Piece incrementMovesMade={props.incrementMovesMade} index={i} />\n            </td>\n        )\n    }\n\n    const tableRow = (i) => {\n        const tableColumns = range(props.puzzleSize)\n            .map((el) => tableData(el + i * props.puzzleSize))\n            .reduce((accumulator, el) => accumulator.concat(el), [])\n\n        return <tr>{tableColumns}</tr>\n    }\n\n    const tableRows = range(props.puzzleSize)\n        .map((i) => tableRow(i))\n        .reduce((accumulator, el) => accumulator.concat(el), [])\n\n    const table = <table style={tableStyle}>{tableRows}</table>\n\n    return table\n}\n\nconst mapStateToProps = (state, ownProps) => {\n    return {\n        props: ownProps,\n        puzzleSize: state.puzzle.puzzleSize,\n        scorecard: state.puzzle.scorecard,\n    }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n    return {\n        setPuzzleState: (state) => dispatch(actions.setPuzzleState(state)),\n        resetPuzzle: (size) => dispatch(actions.resetPuzzle(size)),\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Board)\n","import React from 'react'\nimport { Modal, Button } from 'react-bootstrap'\n\nexport default function SolveStatusModal(props) {\n    const get_p_element = (text) => {\n        return <p>{text}</p>\n    }\n\n    const get_h4_element = (title) => {\n        return <h4>{title}</h4>\n    }\n\n    const get_strat_status = (key) => {\n        return [get_h4_element(key), get_p_element(props.solveStatus[key]['pretty_status'])]\n    }\n\n    const solvingStatuses = Object.keys(props.solveStatus)\n        .map((key) => {\n            return get_strat_status(key)\n        })\n        .reduce((accumulator, el) => accumulator.concat(el), [])\n\n    return (\n        <Modal {...props} size='lg' aria-labelledby='contained-modal-title-vcenter' centered>\n            <Modal.Header closeButton>\n                <Modal.Title id='contained-modal-title-vcenter'>Solve Status</Modal.Title>\n            </Modal.Header>\n            <Modal.Body>{solvingStatuses}</Modal.Body>\n            <Modal.Footer>\n                <Button onClick={props.onHide}>Close</Button>\n            </Modal.Footer>\n        </Modal>\n    )\n}\n","import React from 'react'\nimport { Modal, Button } from 'react-bootstrap'\n\nexport default function SolveStatusModal(props) {\n    const getRandomInt = (max) => {\n        return Math.floor(Math.random() * Math.floor(max))\n    }\n\n    const getClover = () => {\n        const roll = getRandomInt(4)\n        if (roll === 2) {\n            return '🍀'\n        } else {\n            return '☘️'\n        }\n    }\n\n    return (\n        <Modal {...props} size='lg' aria-labelledby='contained-modal-title-vcenter' centered>\n            <Modal.Header closeButton>\n                <Modal.Title id='contained-modal-title-vcenter'>Success!</Modal.Title>\n            </Modal.Header>\n            <Modal.Body>Puzzle solved! Wanna try a harder one? </Modal.Body>\n            <Modal.Footer>\n                <Button onClick={props.onHide}>Sure {getClover()}</Button>\n            </Modal.Footer>\n        </Modal>\n    )\n}\n","import React from 'react'\nimport { Modal, Button } from 'react-bootstrap'\n\nexport default function SolveStatusModal(props) {\n    return (\n        <Modal {...props} size='lg' aria-labelledby='contained-modal-title-vcenter' centered>\n            <Modal.Header closeButton>\n                <Modal.Title id='contained-modal-title-vcenter'>Are you sure?</Modal.Title>\n            </Modal.Header>\n            <Modal.Body>\n                You will lose your progress on your current puzzle. Are you sure you want to continue?\n            </Modal.Body>\n            <Modal.Footer>\n                {props.proceedButton}\n                <Button onClick={props.onHide} variant='success'>\n                    Oh, nevermind then\n                </Button>\n            </Modal.Footer>\n        </Modal>\n    )\n}\n","export const convertToBinary = () => {\n    return\n}\n\nexport const convertToBoolean = (binaryState) => {\n    const boolState = []\n    for (let i = 0; i < binaryState.length; i++) {\n        if (Number(binaryState.charAt(i)) === 1) {\n            boolState.push(true)\n        } else {\n            boolState.push(false)\n        }\n    }\n    return boolState\n}\n","import React, { useEffect, useState, useContext } from 'react'\nimport { Row, Col, Form, Button, Spinner, ButtonGroup, Alert, InputGroup, FormControl } from 'react-bootstrap'\nimport { connect } from 'react-redux'\nimport axios from 'axios'\nimport Board from './Board'\nimport * as actions from '../../../../store/actions/index'\nimport SolveStatusModal from '../../../../components/Notifications/SolveStatusModal'\nimport SolveSuccessModal from '../../../../components/Notifications/SolveSuccessModal'\nimport ConfirmationPrompt from '../../../../components/Notifications/ConfirmationPrompt'\nimport { convertToBoolean } from '../../../../utils/state/stateConversion'\nimport SizeSelector from '../Components/SizeSelector'\nimport swal from 'sweetalert'\nimport Confetti from 'react-confetti'\nimport useWindowSize from 'react-use/lib/useWindowSize'\nimport { getInitialPuzzleState, getNextDifficulty } from '../../../../store/utility'\nimport { ThemeContext } from '../../../App'\n\nconst ENABLE_SOLVING = false\nconst ENABLE_RESET = false\n\nconst convertPuzzleState = (state) => {\n    const convertedState = state.map((el) => {\n        if (!el) {\n            return String(0)\n        } else {\n            return String(1)\n        }\n    })\n    return convertedState.join('')\n}\n\nconst Puzzle = ({\n    puzzleSize,\n    puzzleState,\n    puzzleDifficulty,\n    wasTouched,\n    scorecard,\n    email,\n    username,\n    isAuthenticated,\n    showOnboarding,\n    setPuzzleSize,\n    setPuzzleState,\n    setPuzzleDifficulty,\n    setWasTouched,\n    setCompletedPuzzle,\n    setShowOnboarding,\n}) => {\n    const [disabled, setDisabled] = useState(false)\n    const [solveStatus, setSolveStatus] = useState({})\n    const [solveStatusShow, setSolveStatusShow] = useState(false)\n    const [solveSuccessShow, setSolveSuccessShow] = useState(false)\n    const [confirmationPrompShow, setConfirmationPromptShow] = useState(false)\n    const [onProceedArgs, setOnProceedArgs] = useState([])\n    const [confirmationPrompt, setConfirmationPrompt] = useState()\n    const [showLoginEncouragement, setShowLoginEncouragement] = useState(true)\n    const [showConfetti, setShowConfetti] = useState(false)\n    const [movesMade, setMovesMade] = useState(0)\n    const theme = useContext(ThemeContext)\n\n    const { width, height } = useWindowSize()\n\n    let desiredDifficulty = 'easy'\n    let desiredSize = 3\n\n    const getSuccessMessage = () => {\n        let message\n        const { nextSize, nextDifficulty } = getNextPuzzle()\n        const isGameOver = nextSize === 3 && nextDifficulty === 'easy' ? true : false\n\n        const movesToCompleteMessage = `Solved in ${movesMade} move${movesMade !== 1 ? 's' : ''}! `\n\n        if (!isGameOver) {\n            if (nextSize !== puzzleSize) {\n                message = `Level ${puzzleSize - 2} complete! Level ${nextSize - 2} up next.`\n                setShowConfetti(true)\n                setTimeout(() => {\n                    setShowConfetti(false)\n                }, 5000)\n            } else {\n                const difficulties = {\n                    easy: 'easy',\n                    med: 'medium',\n                    hard: 'hard',\n                    vhard: 'very hard',\n                    xhard: 'suuuuper hard',\n                }\n                message = `Next up is a ${difficulties[nextDifficulty]} puzzle.`\n            }\n        } else {\n            message = \"What ?! How?! You've completed the puzzle of all puzzles 👽🛸 \"\n        }\n        return { successMessage: message, isGameOver: isGameOver, successMessageHeader: movesToCompleteMessage }\n    }\n\n    useEffect(() => {\n        if (wasTouched && !puzzleState.includes(true)) {\n            setCompletedPuzzle(puzzleSize, puzzleDifficulty, email, username, movesMade, isAuthenticated)\n            setTimeout(() => {\n                setWasTouched(false)\n                const { successMessage, isGameOver, successMessageHeader } = getSuccessMessage()\n                swal(successMessageHeader, successMessage, 'success').then((val) => {\n                    setMovesMade(0)\n                    generateNextPuzzle()\n                })\n                if (isGameOver) {\n                    setShowConfetti(true)\n                }\n            }, 600)\n        }\n    }, [puzzleState])\n\n    const customSpacing = {\n        marginBottom: '20px',\n    }\n\n    const customSpacingSmall = {\n        marginBottom: '0px',\n    }\n\n    const customSpacingLarge = {\n        marginBottom: '4%',\n    }\n\n    const handlePuzzleSolve = () => {\n        setActionButton(loadingButton)\n        setDisabled(true)\n\n        const reformattedPuzzleState = convertPuzzleState(puzzleState)\n        axios\n            .post('/solve_simple', {\n                state: reformattedPuzzleState,\n                searchOptions: {\n                    max_d: '200',\n                    max_p: '500',\n                },\n                strategies: {\n                    dfs: true,\n                    bfs: true,\n                    a_star: true,\n                },\n            })\n            .then((response) => {\n                setSolveStatus(response.data.statuses)\n            })\n            .catch((err) => {\n                console.error(err)\n                setSolveStatus(err)\n            })\n            .finally(() => {\n                setActionButton(solveButton)\n                setSolveStatusShow(true)\n                setDisabled(false)\n            })\n    }\n\n    const handleConfirmSizeChange = (newSize) => {\n        if (wasTouched) {\n            desiredSize = newSize\n            desiredDifficulty = puzzleDifficulty\n            setProceedButton(proceedChangePuzzleSize)\n            setConfirmationPromptShow(true)\n        } else {\n            setPuzzleSizeWrapper(newSize)\n        }\n    }\n\n    const handleConfirmResetPuzzle = () => {\n        if (wasTouched) {\n            desiredSize = puzzleSize\n            desiredDifficulty = puzzleDifficulty\n            setProceedButton(proceedGeneratePuzzle)\n            setConfirmationPromptShow(true)\n        } else {\n            handlePuzzleReset()\n        }\n    }\n\n    const handlePuzzleReset = () => {\n        handleGeneratePuzzle(puzzleSize, puzzleDifficulty)\n    }\n\n    const handleConfirmGeneratePuzzle = (puzzle_size, difficulty) => {\n        if (wasTouched) {\n            desiredSize = puzzle_size\n            desiredDifficulty = difficulty\n            setProceedButton(proceedGeneratePuzzle)\n            setConfirmationPromptShow(true)\n        } else {\n            handleGeneratePuzzle(puzzle_size, difficulty)\n        }\n    }\n\n    const handleGeneratePuzzle = (puzzle_size, difficulty) => {\n        setMovesMade(0)\n        // for cases where we got here from the confirmation prompt\n        if (confirmationPrompShow) {\n            setConfirmationPromptShow(false)\n        }\n\n        // for cases where the puzzle has been solved and the user is selecting a new difficulty\n        if (solveSuccessShow) {\n            setSolveSuccessShow(false)\n        }\n\n        setPuzzleDifficulty(difficulty)\n\n        const booleanState = convertToBoolean(getInitialPuzzleState(puzzle_size, difficulty))\n        setPuzzleState(booleanState)\n    }\n\n    const generateEasyPuzzleButton = (\n        <Button\n            onClick={() => handleConfirmGeneratePuzzle(puzzleSize, 'easy')}\n            active={puzzleDifficulty === 'easy'}\n            variant={scorecard[puzzleSize]['easy'] ? 'success' : 'primary'}>\n            {scorecard[puzzleSize]['easy'] ? '✔️' : 'easy'}\n        </Button>\n    )\n\n    const generateMediumPuzzleButton = (\n        <Button\n            onClick={() => handleConfirmGeneratePuzzle(puzzleSize, 'med')}\n            active={puzzleDifficulty === 'med'}\n            variant={scorecard[puzzleSize]['med'] ? 'success' : 'primary'}>\n            {scorecard[puzzleSize]['med'] ? '✔️' : 'medium'}\n        </Button>\n    )\n\n    const generateHardPuzzleButton = (\n        <Button\n            onClick={() => handleConfirmGeneratePuzzle(puzzleSize, 'hard')}\n            active={puzzleDifficulty === 'hard'}\n            variant={scorecard[puzzleSize]['hard'] ? 'success' : 'primary'}>\n            {scorecard[puzzleSize]['hard'] ? '✔️' : 'hard'}\n        </Button>\n    )\n\n    const generateVeryHardPuzzleButton = (\n        <Button\n            onClick={() => handleConfirmGeneratePuzzle(puzzleSize, 'vhard')}\n            active={puzzleDifficulty === 'vhard'}\n            variant={scorecard[puzzleSize]['vhard'] ? 'success' : 'primary'}>\n            {scorecard[puzzleSize]['vhard'] ? '✔️' : 'very hard'}\n        </Button>\n    )\n\n    const generateImpossiblePuzzleButton = (\n        <Button\n            onClick={() => handleConfirmGeneratePuzzle(puzzleSize, 'xhard')}\n            active={puzzleDifficulty === 'xhard'}\n            variant={scorecard[puzzleSize]['xhard'] ? 'success' : 'primary'}>\n            {scorecard[puzzleSize]['xhard'] ? '✔️' : '☠️'}\n        </Button>\n    )\n\n    const getNextPuzzle = () => {\n        let nextSize, nextDifficulty\n        const p = [\n            ['easy', 'med', 'hard'],\n            ['easy', 'med', 'hard'],\n            ['easy', 'med', 'hard', 'vhard'],\n            ['easy', 'med', 'hard', 'vhard'],\n            ['easy', 'med', 'hard', 'vhard'],\n            ['easy', 'med', 'hard', 'vhard'],\n            ['easy', 'med', 'hard', 'vhard', 'xhard'],\n            ['easy', 'med', 'hard', 'vhard', 'xhard'],\n        ]\n\n        const currentSize = puzzleSize - 3\n        const currentDifficulty = p[currentSize].indexOf(puzzleDifficulty)\n        if (currentDifficulty !== p[currentSize].length - 1) {\n            nextSize = puzzleSize\n            nextDifficulty = p[currentSize][currentDifficulty + 1]\n        } else if (currentSize === p.length - 1) {\n            nextSize = 3\n            nextDifficulty = 'easy'\n        } else {\n            nextSize = puzzleSize + 1\n            nextDifficulty = 'easy'\n        }\n\n        return { nextSize, nextDifficulty }\n    }\n\n    const generateNextPuzzle = () => {\n        const { nextSize, nextDifficulty } = getNextPuzzle()\n\n        setPuzzleSize(nextSize)\n        handleGeneratePuzzle(nextSize, nextDifficulty)\n    }\n\n    const setPuzzleSizeWrapper = (size) => {\n        const nextDifficulty = getNextDifficulty(scorecard, size)\n\n        setPuzzleSize(size)\n        setTimeout(() => {\n            setPuzzleDifficulty(nextDifficulty)\n            handleGeneratePuzzle(size, nextDifficulty)\n        }, 0)\n    }\n\n    const proceedGeneratePuzzle = (\n        <Button\n            onClick={() => {\n                handleGeneratePuzzle(desiredSize, desiredDifficulty)\n                setConfirmationPromptShow(false)\n            }}>\n            Yup I know, continue\n        </Button>\n    )\n\n    const proceedChangePuzzleSize = (\n        <Button\n            onClick={() => {\n                setPuzzleSizeWrapper(desiredSize)\n                setConfirmationPromptShow(false)\n            }}\n            variant='warning'>\n            Yup I know, continue\n        </Button>\n    )\n\n    const [proceedButton, setProceedButton] = useState(proceedGeneratePuzzle)\n\n    const solveButton = 'Solve'\n\n    const loadingButton = (\n        <React.Fragment>\n            <Spinner as='span' animation='border' size='sm' role='status' aria-hidden='true' /> <span></span>\n            Loading...\n        </React.Fragment>\n    )\n\n    const [actionButton, setActionButton] = useState(solveButton)\n\n    const incrementMovesMade = () => {\n        setMovesMade(movesMade + 1)\n    }\n\n    return (\n        <React.Fragment>\n            <div>\n                <div style={customSpacing}></div>\n                <Row>\n                    <Col sm='1'></Col>\n                    <Col sm='10'>\n                        <Row>\n                            <Col sm='2'></Col>\n                            <Col sm='8'>\n                                <Alert\n                                    className={'alert-warning_' + theme.theme}\n                                    show={!isAuthenticated && showLoginEncouragement}\n                                    variant='warning'\n                                    onClose={() => setShowLoginEncouragement(false)}\n                                    dismissible>\n                                    <Alert.Heading>👤 login to save your progress! ↗️</Alert.Heading>\n                                    <p>\n                                        Logging in will let you save your puzzle solving progress, so you can always\n                                        pick up from where you left off, on any device!\n                                    </p>\n                                </Alert>\n                            </Col>\n                            <Col sm='2'></Col>\n                        </Row>\n                        <div style={customSpacing}></div>\n                        <Row>\n                            <Col sm='2'></Col>\n                            <Col sm='8'>\n                                <Form>\n                                    <Form.Group as={Row}>\n                                        <Form.Label column sm='3'>\n                                            <strong>\n                                                <span className={'navlinks_' + theme.theme}>level</span>\n                                            </strong>\n                                        </Form.Label>\n                                        <Col sm='9'>\n                                            <SizeSelector\n                                                selectedSize={puzzleSize}\n                                                scorecard={scorecard}\n                                                handleClick={handleConfirmSizeChange}\n                                            />\n                                        </Col>\n                                    </Form.Group>\n                                </Form>\n                            </Col>\n                            <Col sm='2'></Col>\n                        </Row>\n                        <div style={customSpacingSmall}></div>\n                        <Row>\n                            <Col sm='2'></Col>\n                            <Col sm='8'>\n                                <Form>\n                                    <Form.Group as={Row}>\n                                        <Form.Label column sm='3'>\n                                            <strong>\n                                                <span className={'navlinks_' + theme.theme}>difficulty</span>\n                                            </strong>\n                                        </Form.Label>\n                                        <Col sm='9'>\n                                            <ButtonGroup>\n                                                {generateEasyPuzzleButton} {generateMediumPuzzleButton}{' '}\n                                                {generateHardPuzzleButton}{' '}\n                                                {puzzleSize > 4 && generateVeryHardPuzzleButton}{' '}\n                                                {puzzleSize > 8 && generateImpossiblePuzzleButton}\n                                            </ButtonGroup>\n                                        </Col>\n                                    </Form.Group>\n                                </Form>\n                            </Col>\n                            <Col sm='2'></Col>\n                        </Row>\n                        <div style={customSpacingSmall}></div>\n                        <Row>\n                            <Col sm='2'></Col>\n                            <Col sm='8'>\n                                <Form>\n                                    <Form.Group as={Row}>\n                                        <Form.Label column sm='3'>\n                                            <strong>\n                                                <span className={'navlinks_' + theme.theme}>moves made</span>\n                                            </strong>\n                                        </Form.Label>\n                                        <Col sm='3'>\n                                            <InputGroup>\n                                                <FormControl readOnly disabled value={movesMade}></FormControl>\n                                                <InputGroup.Append>\n                                                    <Button variant='primary' onClick={handleConfirmResetPuzzle}>\n                                                        Reset\n                                                    </Button>\n                                                </InputGroup.Append>\n                                            </InputGroup>\n                                        </Col>\n                                        <Col sm='6'></Col>\n                                    </Form.Group>\n                                </Form>\n                            </Col>\n                            <Col sm='2'></Col>\n                        </Row>\n                        <div style={customSpacing}></div>\n                        <Row>\n                            <Col sm='2'></Col>\n                            <Col sm='8'>\n                                <Board\n                                    incrementMovesMade={incrementMovesMade}\n                                    puzzleSize={puzzleSize}\n                                    handleGeneratePuzzle={handleGeneratePuzzle}\n                                />\n                            </Col>\n                            <Col sm='2'></Col>\n                        </Row>\n                        <div style={customSpacing}></div>\n                        <Row>\n                            {ENABLE_RESET && (\n                                <Col sm='6'>\n                                    <div className='col text-center'>\n                                        <Button variant='primary' onClick={handleConfirmResetPuzzle}>\n                                            Reset\n                                        </Button>\n                                    </div>\n                                </Col>\n                            )}\n                            {ENABLE_SOLVING && (\n                                <Col sm='6'>\n                                    <div className='col text-center'>\n                                        <Button variant='primary' disabled={disabled} onClick={handlePuzzleSolve}>\n                                            {actionButton}\n                                        </Button>\n                                    </div>\n                                </Col>\n                            )}\n                        </Row>\n                    </Col>\n                    <Col sm='1'></Col>\n                </Row>\n                <div style={customSpacingLarge}></div>\n            </div>\n            <SolveStatusModal\n                show={solveStatusShow}\n                solveStatus={solveStatus}\n                onHide={() => setSolveStatusShow(false)}\n            />\n            <SolveSuccessModal show={solveSuccessShow} onHide={generateNextPuzzle} />\n            <ConfirmationPrompt\n                show={confirmationPrompShow}\n                proceedButton={proceedButton}\n                onHide={() => setConfirmationPromptShow(false)}\n            />\n            {showConfetti && <Confetti width={width} height={height} tweenDuration={5000} />}\n        </React.Fragment>\n    )\n}\n\nconst mapStateToProps = (state) => {\n    return {\n        puzzleSize: state.puzzle.puzzleSize,\n        puzzleState: state.puzzle.puzzleState,\n        wasTouched: state.puzzle.wasTouched,\n        puzzleDifficulty: state.puzzle.difficulty,\n        scorecard: state.puzzle.scorecard,\n        email: state.auth.email,\n        showOnboarding: state.puzzle.showOnboarding,\n        isAuthenticated: state.auth.token !== null,\n        username: state.auth.username,\n    }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n    return {\n        setPuzzleSize: (size) => dispatch(actions.changePuzzleSize(size)),\n        setPuzzleState: (state) => dispatch(actions.setPuzzleState(state)),\n        setPuzzleDifficulty: (difficulty) => dispatch(actions.setPuzzleDifficulty(difficulty)),\n        setWasTouched: (wasTouched) => dispatch(actions.setWasTouched(wasTouched)),\n        setCompletedPuzzle: (email, size, difficulty, username, movesToSolve, isAuthenticated) =>\n            dispatch(actions.updateCompletedPuzzle(email, size, difficulty, username, movesToSolve, isAuthenticated)),\n        setShowOnboarding: (email, showOnboarding) => dispatch(actions.updateShowOnboarding(email, showOnboarding)),\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Puzzle)\n","import React, { useContext } from 'react'\nimport { makeStyles } from '@material-ui/core/styles'\nimport { Nav } from 'react-bootstrap'\nimport { LinkContainer } from 'react-router-bootstrap'\nimport classes from './AccountNavigation.css'\nimport { ThemeContext } from '../../../containers/App'\n\nconst useStyles = makeStyles((theme) => ({\n    navigationLinks: {\n        color: 'white',\n    },\n    warningLink: {\n        color: 'red',\n    },\n}))\n\nconst AccountNavigation = (props) => {\n    const classes = useStyles()\n    const theme = useContext(ThemeContext)\n\n    return (\n        <div>\n            {props.isLoggedIn ? (\n                <Nav classname='mr-auto'>\n                    <LinkContainer to='/logout'>\n                        <Nav.Link className='logout-warning-mobile' href='/logout'>\n                            <span className={'navlinks_' + theme.theme + ' hvr-underline-from-left'}>Logout</span>\n                        </Nav.Link>\n                    </LinkContainer>\n                </Nav>\n            ) : (\n                <Nav classname='mr-auto'>\n                    <LinkContainer to='/auth'>\n                        <Nav.Link>\n                            <span className={'navlinks_' + theme.theme + ' hvr-underline-from-left'}>Login</span>\n                        </Nav.Link>\n                    </LinkContainer>\n                    <LinkContainer to='/register'>\n                        <Nav.Link>\n                            <span className={'navlinks_' + theme.theme + ' hvr-underline-from-left'}>Sign Up</span>\n                        </Nav.Link>\n                    </LinkContainer>\n                </Nav>\n            )}\n        </div>\n    )\n}\n\nexport default AccountNavigation\n","import React, { useContext } from 'react'\nimport { Navbar, Nav, Button, DropdownButton, Dropdown } from 'react-bootstrap'\nimport AccountNavigation from '../AccountNavigation/AccountNavigation'\nimport { LinkContainer } from 'react-router-bootstrap'\nimport { ThemeContext, ThemeToggleContext } from '../../../containers/App'\n\nconst Layout = (props) => {\n    const theme = useContext(ThemeContext)\n    const themeToggle = useContext(ThemeToggleContext)\n\n    return (\n        <div className='root-container'>\n            <Navbar expand='md' collapseOnSelect={true}>\n                <LinkContainer to='/'>\n                    <Navbar.Brand href='#home'>\n                        <span className={'navlinks_' + theme.theme + ' hvr-underline-from-left'}>²Solve</span>\n                    </Navbar.Brand>\n                </LinkContainer>\n                <Navbar.Toggle aria-controls='basic-navbar-nav' />\n                <Navbar.Collapse id='basic-navbar-nav'>\n                    <Nav className='mr-auto'>\n                        <LinkContainer to='/puzzle'>\n                            <Nav.Link>\n                                <span\n                                    className={'navlinks_' + theme.theme + ' hvr-underline-from-left'}\n                                    style={{ marginBottom: '-4px' }}>\n                                    Puzzle\n                                </span>\n                            </Nav.Link>\n                        </LinkContainer>\n                        <LinkContainer to='/leaderboards'>\n                            <Nav.Link>\n                                <span\n                                    className={'navlinks_' + theme.theme + ' hvr-underline-from-left'}\n                                    style={{ marginBottom: '-4px' }}>\n                                    Leaderboards\n                                </span>\n                            </Nav.Link>\n                        </LinkContainer>\n                        {/* <DropdownButton size='sm' title={theme.theme}>\n                            <Dropdown.Item onClick={() => themeToggle.setTheme('light')}>Light</Dropdown.Item>\n                            <Dropdown.Item onClick={() => themeToggle.setTheme('dark')}>Dark</Dropdown.Item>\n                        </DropdownButton> */}\n                    </Nav>\n                    <AccountNavigation isLoggedIn={props.isLoggedIn} />\n                </Navbar.Collapse>\n            </Navbar>\n            {props.children}\n        </div>\n    )\n}\n\nexport default Layout\n","import React, { useEffect } from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { useSnackbar } from 'notistack'\nimport { removeSnackbar } from '../../store/actions/notistack'\n\nlet displayed = []\n\nconst Notifier = () => {\n    const dispatch = useDispatch()\n    const notifications = useSelector((store) => store.notifications.notifications || [])\n    const { enqueueSnackbar, closeSnackbar } = useSnackbar()\n\n    const storeDisplayed = (id) => {\n        displayed = [...displayed, id]\n    }\n\n    const removeDisplayed = (id) => {\n        displayed = [...displayed.filter((key) => id !== key)]\n    }\n\n    useEffect(() => {\n        notifications.forEach(({ key, message, options = {}, dismissed = false }) => {\n            if (dismissed) {\n                // dismiss snackbar using notistack\n                closeSnackbar(key)\n                return\n            }\n\n            // do nothing if snackbar is already displayed\n            if (displayed.includes(key)) return\n\n            // display snackbar using notistack\n            enqueueSnackbar(message, {\n                key,\n                ...options,\n                onClose: (event, reason, myKey) => {\n                    if (options.onClose) {\n                        options.onClose(event, reason, myKey)\n                    }\n                },\n                onExited: (event, myKey) => {\n                    // removen this snackbar from redux store\n                    dispatch(removeSnackbar(myKey))\n                    removeDisplayed(myKey)\n                },\n            })\n\n            // keep track of snackbars that we've displayed\n            storeDisplayed(key)\n        })\n    }, [notifications, closeSnackbar, enqueueSnackbar, dispatch])\n\n    return null\n}\n\nexport default Notifier\n","import styled, { css } from 'styled-components'\n\nconst Button = styled.button`\n    border: 4px solid white;\n    width: 80px;\n    height: 40px;\n    ${(props) => props.redText && `color: red;`}\n    background-color: ${(props) => (props.redText ? `black` : `white`)}\n\n    ${(props) =>\n        props.primary &&\n        css`\n            background-color: ${props.primary};\n            color: orangered;\n        `};\n`\n\nexport default Button\n","import styled from 'styled-components'\n\nconst Container = styled.div`\n    text-align: center;s\n`\n\nexport default Container\n","import React from 'react'\nimport { Button, Container } from '../../../components/Styled Components/StyledComponents'\n\nconst Test = () => {\n    return (\n        <Container>\n            <h1>Hello</h1>\n            <Button>Normal Button</Button>\n            <Button primary={'purple'} redText>\n                Primary Button\n            </Button>\n        </Container>\n    )\n}\n\nexport default Test\n","import React, { useEffect, useState } from 'react'\nimport './App.css'\nimport { connect } from 'react-redux'\nimport { withRouter } from 'react-router-dom'\nimport Login from '../components/Authentication/Login/Login'\nimport Register from '../components/Authentication/Register/Register'\nimport Logout from '../components/Authentication/Logout/Logout'\nimport ForgotPassword from '../components/Authentication/ForgotPassword/ForgotPassword'\nimport Leaderboards from '../containers/Pages/Leaderboards/Leaderboards'\nimport Home from '../containers/Pages/Home/Home'\nimport Puzzle from '../containers/Pages/Puzzle/Container/Puzzle'\nimport Layout from '../components/Navigation/Layout/Layout'\nimport * as actions from '../store/actions/index'\nimport Notifier from '../components/Notifications/Notifier'\nimport { BrowserRouter as Router, Route, Redirect, Switch } from 'react-router-dom'\nimport Test from './Pages/TestingStyledComponents/Test'\n\nexport const ThemeToggleContext = React.createContext({})\nexport const ThemeContext = React.createContext({})\n\nconst App = ({ isAuthenticated, onTryAutoSignup }) => {\n    useEffect(() => {\n        onTryAutoSignup()\n    }, [])\n\n    let routes = (\n        <Switch>\n            <Route path='/' exact component={Home} />\n            <Route path='/puzzle' exact component={Puzzle} />\n            <Route path='/leaderboards' exact component={Leaderboards} />\n            <Route path='/auth' component={Login} />\n            <Route path='/register' component={Register} />\n            <Route path='/forgotpassword' component={ForgotPassword} />\n            <Route path='/test' component={Test} />\n            <Redirect to='/' />\n        </Switch>\n    )\n\n    if (isAuthenticated) {\n        routes = (\n            <Switch>\n                <Route path='/' exact component={Home} />\n                <Route path='/puzzle' exact component={Puzzle} />\n                <Route path='/leaderboards' exact component={Leaderboards} />\n                <Route path='/logout' component={Logout} />\n                <Redirect to='/' />\n            </Switch>\n        )\n    }\n\n    const [theme, setTheme] = useState('dark')\n    const styles = {\n        background: {\n            light: {\n                color: 'white',\n            },\n            dark: {\n                color: '#263859',\n            },\n        },\n        navbarText: {\n            light: {\n                color: '#959595',\n            },\n            dark: {\n                color: '#7045af',\n            },\n        },\n        button: {\n            light: {\n                backgroundColor: 'white',\n                color: 'blue',\n            },\n            dark: {\n                backgroundColor: 'grey',\n                color: 'white',\n            },\n        },\n    }\n\n    if (theme === 'dark') {\n        document.body.style.backgroundColor = '#182952'\n    } else {\n        document.body.style.backgroundColor = 'white'\n    }\n\n    return (\n        <div>\n            <Notifier />\n            <ThemeToggleContext.Provider\n                value={{\n                    setTheme,\n                }}>\n                <ThemeContext.Provider\n                    value={{\n                        theme,\n                    }}>\n                    <Layout isLoggedIn={isAuthenticated}>{routes}</Layout>\n                </ThemeContext.Provider>\n            </ThemeToggleContext.Provider>\n        </div>\n    )\n}\n\nconst mapStateToProps = (state) => {\n    return {\n        isAuthenticated: state.auth.token !== null,\n        wasLoginError: state.auth.error,\n    }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n    return {\n        onTryAutoSignup: () => dispatch(actions.authCheckState()),\n    }\n}\n\nexport default withRouter(connect(mapStateToProps, mapDispatchToProps)(App))\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import * as actionTypes from '../actions/actionTypes'\nimport { updateObject } from '../utility'\n\nconst initialState = {\n  counter: 0,\n}\n\nconst reducer = (state = initialState, action) => {\n  switch (action.type) {\n    case actionTypes.INCREMENT:\n      return updateObject(state, { counter: state.counter + 1 })\n    case actionTypes.DECREMENT:\n      return updateObject(state, { counter: state.counter - 1 })\n    case actionTypes.ADD_5:\n      return updateObject(state, { counter: state.counter + 5 })\n    case actionTypes.SUBTRACT_5:\n      return updateObject(state, { counter: state.counter - 5 })\n    default:\n      return state\n  }\n}\n\nexport default reducer\n","import * as actionTypes from '../actions/actionTypes'\nimport { updateObject } from '../utility'\n\nconst initialState = {\n  results: [],\n}\n\nconst deleteSnapshot = (state, action) => {\n  const updatedResults = state.results.filter((result) => result.id !== action.deleteElId)\n  return updateObject(state, { results: updatedResults })\n}\n\nconst reducer = (state = initialState, action) => {\n  switch (action.type) {\n    case actionTypes.DELETE_SNAPSHOT:\n      return deleteSnapshot(state, action)\n    case actionTypes.STORE_STATE:\n      return updateObject(state, { results: state.results.concat({ id: new Date(), value: action.value }) })\n    default:\n      return state\n  }\n}\n\nexport default reducer\n","import * as actionTypes from '../actions/actionTypes'\nimport { updateObject } from '../utility'\n\nconst initialState = {\n    token: null,\n    userId: null,\n    error: null,\n    loading: false,\n    email: null,\n    username: null,\n    resetPasswordConfirmation: null,\n    wasRedirected: false,\n}\n\nconst authStart = (state, action) => {\n    return updateObject(state, { error: null, loading: true })\n}\n\nconst authSuccess = (state, action) => {\n    return updateObject(state, {\n        token: action.token,\n        userId: action.userId,\n        error: null,\n        loading: false,\n        email: action.email,\n        username: action.username,\n    })\n}\n\nconst authFail = (state, action) => {\n    return updateObject(state, {\n        error: action.error,\n        loading: false,\n    })\n}\n\nconst authLogout = (state, action) => {\n    return updateObject(state, {\n        token: null,\n        userId: null,\n        error: null,\n        loading: false,\n        email: null,\n        username: null,\n    })\n}\n\nconst reducer = (state = initialState, action) => {\n    switch (action.type) {\n        case actionTypes.AUTH_START:\n            return authStart(state, action)\n        case actionTypes.AUTH_SUCCESS:\n            return authSuccess(state, action)\n        case actionTypes.AUTH_FAIL:\n            return authFail(state, action)\n        case actionTypes.AUTH_LOGOUT:\n            return authLogout(state, action)\n        case actionTypes.UPDATE_USERNAME:\n            return updateObject(state, { username: action.username })\n        case actionTypes.RESET_PASSWORD_CONFIRMATION_EMAIL:\n            return updateObject(state, { resetPasswordConfirmation: action.email })\n        case actionTypes.UPDATE_WAS_REDIRECTED:\n            return updateObject(state, { wasRedirected: action.wasRedirected })\n        default:\n            return state\n    }\n}\n\nexport default reducer\n","import { ENQUEUE_SNACKBAR, CLOSE_SNACKBAR, REMOVE_SNACKBAR } from '../actions/actionTypes'\n\nconst defaultState = {\n    notifications: [],\n}\n\nconst reducer = (state = defaultState, action) => {\n    switch (action.type) {\n        case ENQUEUE_SNACKBAR:\n            return {\n                ...state,\n                notifications: [\n                    ...state.notifications,\n                    {\n                        key: action.key,\n                        ...action.notification,\n                    },\n                ],\n            }\n\n        case CLOSE_SNACKBAR:\n            return {\n                ...state,\n                notifications: state.notifications.map((notification) =>\n                    action.dismissAll || notification.key === action.key\n                        ? { ...notification, dismissed: true }\n                        : { ...notification }\n                ),\n            }\n\n        case REMOVE_SNACKBAR:\n            return {\n                ...state,\n                notifications: state.notifications.filter((notification) => notification.key !== action.key),\n            }\n\n        default:\n            return state\n    }\n}\n\nexport default reducer\n","import * as actionTypes from '../actions/actionTypes'\nimport { updateObject, flipPiece, setCompleted, getNewScorecard } from '../utility'\n\nconst initialState = {\n    puzzleState: [],\n    puzzleSize: 3,\n    wasTouched: false,\n    difficulty: 'easy',\n    showOnboarding: true,\n    scorecard: {\n        3: {\n            easy: false,\n            med: false,\n            hard: false,\n        },\n        4: {\n            easy: false,\n            med: false,\n            hard: false,\n        },\n        5: {\n            easy: false,\n            med: false,\n            hard: false,\n            vhard: false,\n        },\n        6: {\n            easy: false,\n            med: false,\n            hard: false,\n            vhard: false,\n        },\n        7: {\n            easy: false,\n            med: false,\n            hard: false,\n            vhard: false,\n        },\n        8: {\n            easy: false,\n            med: false,\n            hard: false,\n            vhard: false,\n        },\n        9: {\n            easy: false,\n            med: false,\n            hard: false,\n            vhard: false,\n            xhard: false,\n        },\n        10: {\n            easy: false,\n            med: false,\n            hard: false,\n            vhard: false,\n            xhard: false,\n        },\n    },\n}\n\nconst reducer = (state = initialState, action) => {\n    switch (action.type) {\n        case actionTypes.FLIP_PIECE:\n            return flipPiece(state, action)\n        case actionTypes.SET_PUZZLE_STATE:\n            return updateObject(state, { puzzleState: action.newState, wasTouched: false })\n        case actionTypes.SET_PUZZLE_SIZE:\n            return updateObject(state, { puzzleSize: action.size })\n        case actionTypes.SET_PUZZLE_DIFFICULTY:\n            return updateObject(state, { difficulty: action.difficulty })\n        case actionTypes.SET_WAS_TOUCHED:\n            return updateObject(state, { wasTouched: action.wasTouched })\n        case actionTypes.SET_COMPLETED:\n            return setCompleted(state, action)\n        case actionTypes.INITIALIZE_SCORECARD:\n            return updateObject(state, { scorecard: getNewScorecard() })\n        case actionTypes.UPDATE_SCORECARD:\n            return updateObject(state, { scorecard: action.scorecard })\n        case actionTypes.UPDATE_SHOW_ONBOARDING:\n            return updateObject(state, { showOnboarding: action.showOnboarding })\n        default:\n            return state\n    }\n}\n\nexport default reducer\n","import 'bootstrap/dist/css/bootstrap.min.css'\nimport 'react-bootstrap-range-slider/dist/react-bootstrap-range-slider.css'\nimport React, { useState } from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './containers/App'\nimport * as serviceWorker from './serviceWorker'\nimport { createStore, combineReducers, applyMiddleware, compose } from 'redux'\nimport { Provider } from 'react-redux'\nimport thunk from 'redux-thunk'\nimport { BrowserRouter } from 'react-router-dom'\nimport countReducer from './store/reducers/counter'\nimport resultsReducer from './store/reducers/results'\nimport authReducer from './store/reducers/auth'\nimport notistackReducer from './store/reducers/notistack'\nimport puzzleReducer from './store/reducers/puzzle'\nimport { SnackbarProvider } from 'notistack'\nimport './fonts/Rubik-Regular.ttf'\n\nconst rootReducer = combineReducers({\n    counter: countReducer,\n    results: resultsReducer,\n    auth: authReducer,\n    notifications: notistackReducer,\n    puzzle: puzzleReducer,\n})\n\nconst logger = (store) => {\n    return (next) => {\n        return (action) => {\n            // console.log('[Middleware] Dispatching ', action)\n            const result = next(action)\n            // console.log('[Middleware] next state', store.getState())\n            return result\n        }\n    }\n}\n\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose\n\nconst store = createStore(rootReducer, composeEnhancers(applyMiddleware(logger, thunk)))\n\nReactDOM.render(\n    <React.StrictMode>\n        <Provider store={store}>\n            <BrowserRouter>\n                <SnackbarProvider>\n                    <App />\n                </SnackbarProvider>\n            </BrowserRouter>\n        </Provider>\n    </React.StrictMode>,\n    document.getElementById('root')\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}